"""Configuration for the Sphinx documentation builder."""

import os
import re
import sys


def load_version(filepath_init):
    """Load version from variable __version__ in file __init__.py"""
    try:
        with open(filepath_init) as file_handle:
            file_content = file_handle.read()
        re_for_version = re.compile(r"""__version__\s+=\s+['"](.*)['"]""")
        match = re_for_version.search(file_content)
        version = match.group(1)
        print()
        print(
            "Automatically detected version of the package "
            "from __version__ variable in __init__.py: {}".format(version)
        )
        print()
        return version
    except Exception as excp:
        message = (
            "Failed to load version string from __version__ variable in "
            "__init__.py in the package directory."
        )
        raise ValueError(message)


# -- Project information -----------------------------------------------------

# Project name
project = "kgw"

# Copyright statement at bottom of page
copyright = "2024, Robert Haas"

# Author(s)
author = "Robert Haas"

# Short X.Y version
version = ""

# Full version, including alpha/beta/rc tags
release = load_version(os.path.join("..", "..", project, "__init__.py"))


# -- General configuration ---------------------------------------------------

# Minimal Sphinx version for build
needs_sphinx = "1.7.4"

# Sphinx extension module names
# > https://www.sphinx-doc.org/en/master/usage/extensions
extensions = [
    "sphinx.ext.autodoc",      # auto-generate documentation from docstrings
    "sphinx.ext.viewcode",     # links to highlighted source code for documented code objects
    "sphinx.ext.napoleon",     # support for Google and NumPy docstrings
    "sphinx.ext.intersphinx",  # link to objects in external documentation
    "sphinx.ext.githubpages",  # creates .nojekyll file on generated HTML directory
    "autoapi.extension",       # generate an API reference for all user-facing objects
    "nbsphinx",                # execute Jupyter notebooks and include HTML output in docs
    "IPython.sphinxext.ipython_console_highlighting",  # syntax-highlighting in Jupyter Notebooks
]


# -- Sphinx configuration ---------------------------------------------------

# - http://www.sphinx-doc.org/en/master/usage/configuration.html

# Whether module names are prepended to all object names
add_module_names = True

# Relative path to package
sys.path.insert(0, os.path.abspath("../.."))

# Relative path to templates
templates_path = [os.path.join("source", "templates")]

# The suffix(es) of source filenames.
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ["templates", "themes"]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# Default domain and role
# - https://www.sphinx-doc.org/en/master/usage/configuration.html#confval-primary_domain
primary_domain = 'py'
default_role = 'py:obj'


# -- Options for HTML output -------------------------------------------------

# Read the Docs (RTD) Sphinx Theme
# - https://sphinx-rtd-theme.readthedocs.io/en/latest
# - https://github.com/rtfd/sphinx_rtd_theme
# - Caution: The Makefile copies a modified JS file into the theme's folder
#   before docs generation, effectively using a modified RTD theme.
html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# - https://sphinx-rtd-theme.readthedocs.io/en/latest/configuring.html
html_theme_options = {
    "logo_only": True,
    "titles_only": False,
}
html_show_sourcelink = False
html_logo = "images/kgw.svg"

# Relative paths to custom static files (overwrite builtin static files)
html_static_path = ["_static"]


# -- Extension configuration -------------------------------------------------

# napoleon
# - https://sphinxcontrib-napoleon.readthedocs.io/en/latest/sphinxcontrib.napoleon.html
napoleon_numpy_docstring = True
napoleon_google_docstring = False
napoleon_use_param = False
napoleon_use_rtype = False
napoleon_use_ivar = True

# nbsphinx
# - https://nbsphinx.readthedocs.io
nbsphinx_execute = "never"      # do not execute notebooks but reuse their output
nbsphinx_prompt_width = '1200'  # width of input and output prompts in HTML
nbsphinx_requirejs_path = ''    # prevent nbsphinx from loading RequireJS

# autodoc
# - http://www.sphinx-doc.org/en/stable/ext/autodoc.html
autodoc_member_order = "bysource"

# autoapi
# - https://sphinx-autoapi.readthedocs.io/en/latest/reference/config.html#customisation-options
autoapi_type = "python"
autoapi_template_dir = os.path.join("source", "templates", "autoapi")
autoapi_dirs = [os.path.join("..", "..", project)]
autoapi_options = [
    "members",
    "show-module-summary",
    "imported-members",
    "inherited-members",
]


def keep_init_methods(app, what, name, obj, skip, options):
    if what == "method" and name.endswith("__init__"):
        skip = False
    if name == "default_parameters":
        skip = True
    return skip


# intersphinx
intersphinx_mapping = {'python': ('https://docs.python.org/3', None)}


def setup(app):
    # Use a self-defined CSS file to modify HTML appearance
    app.add_css_file("css/custom.css")
    # Skip special members in sphinx-autoapi, e.g. __str__ or __repr__ methods
    app.connect("autoapi-skip-member", keep_init_methods)
